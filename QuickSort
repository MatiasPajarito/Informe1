#include <iostream>
#include <fstream>
#include <chrono>
#include <vector>
using namespace std;
using namespace std::chrono;

void swap(int *a, int *b) {
    int t = *a;
    *a = *b;
    *b = t;
}

int partition(vector<int>& array, int low, int high) {
    int pivot = array[high];
    int i = (low - 1);
    for (int j = low; j < high; j++) {
        if (array[j] <= pivot) {
            i++;
            swap(&array[i], &array[j]);
        }
    }
    swap(&array[i + 1], &array[high]);
    return (i + 1);
}

void quickSort(vector<int>& array, int low, int high) {
    if (low < high) {
        int pi = partition(array, low, high);
        quickSort(array, low, pi - 1);
        quickSort(array, pi + 1, high);
    }
}

int main() {
    vector<int> data;
    ifstream inputFile("a.txt");

    if (!inputFile) {
        cerr << "Error opening file" << endl;
        return 1;
    }

    int number;
    while (inputFile >> number) {
        data.push_back(number);
    }
    
    inputFile.close();
    auto start = high_resolution_clock::now();
    quickSort(data, 0, data.size() - 1);
    auto end = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(end - start);
    cout << "Tiempo de ejecucion: " << duration.count() << " microsegundos" << endl;

    return 0;
}

#include <iostream>
#include <fstream>
#include <vector>
#include <chrono>

using namespace std;


void leerMatriz(ifstream &archivo, vector<vector<int>> &matriz, int filas, int columnas) {
    for (int i = 0; i < filas; i++) {
        vector<int> fila(columnas);
        for (int j = 0; j < columnas; j++) {
            archivo >> fila[j];
        }
        matriz.push_back(fila);
    }
}

void transponerMatriz(const vector<vector<int>> &matriz, vector<vector<int>> &matrizTranspuesta, int filas, int columnas) {
    matrizTranspuesta.resize(columnas, vector<int>(filas));
    for (int i = 0; i < filas; i++) {
        for (int j = 0; j < columnas; j++) {
            matrizTranspuesta[j][i] = matriz[i][j];
        }
    }
}

int main() {
    ifstream archivo("4 2.txt");
    if (!archivo.is_open()) {
        cout << "No se pudo abrir el archivo." << endl;
        return 1;
    }

    auto inicio = chrono::high_resolution_clock::now();

    int filasA, columnasA;
    archivo >> filasA >> columnasA;
    vector<vector<int>> matrizA;
    leerMatriz(archivo, matrizA, filasA, columnasA);

    int filasB, columnasB;
    archivo >> filasB >> columnasB;
    vector<vector<int>> matrizB;
    leerMatriz(archivo, matrizB, filasB, columnasB);

    archivo.close();


    if (columnasA != filasB) {
        cout << "Las columnas de matriz A deben ser iguales a las filas de matriz B." << endl;
        return 1;
    }

    vector<vector<int>> matrizBTranspuesta;
    transponerMatriz(matrizB, matrizBTranspuesta, filasB, columnasB);
    vector<vector<int>> producto(filasA, vector<int>(columnasB, 0));
    for (int i = 0; i < filasA; i++) {
        for (int j = 0; j < columnasB; j++) {
            int suma = 0;
            for (int k = 0; k < columnasA; k++) {
                suma += matrizA[i][k] * matrizBTranspuesta[j][k];
            }
            producto[i][j] = suma;
        }
    }

    auto fin = chrono::high_resolution_clock::now();

    chrono::duration<double> tiempo_ejecucion = fin - inicio;
    cout << "Tiempo de ejecuciÃ³n: " << tiempo_ejecucion.count() << " segundos" << endl;

    return 0;
}
